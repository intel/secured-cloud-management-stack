From 04a0431e1032617e00db319f2091e4420da6a951 Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Sun, 5 Jun 2022 00:12:04 +0800
Subject: [PATCH] Add methods to get SGX info

---
 ironic_python_agent/hardware.py               |  59 ++++++-
 .../tests/unit/test_hardware.py               | 159 ++++++++++++++++++
 2 files changed, 217 insertions(+), 1 deletion(-)

diff --git a/ironic_python_agent/hardware.py b/ironic_python_agent/hardware.py
index 2ad66d1..5b3a6b2 100644
--- a/ironic_python_agent/hardware.py
+++ b/ironic_python_agent/hardware.py
@@ -68,6 +68,42 @@ def _get_device_info(dev, devclass, field):
                 field, dev, devclass))
 
 
+def _get_cpu_info_by_cpuid(eax, ecx=None):
+    try:
+        args = ['cpuid', '-l', eax, '-r', '-1']
+        if ecx is not None:
+            args = args + ['-s', ecx]
+        out, _ = utils.execute(*args)
+        # The output format is as follows.
+        # CPU:
+        #    0x07 0x00: eax=0x.. ebx=0x.. ecx=0x.. edx=0x..
+        if out.startswith('CPU:\n'):
+            _tmp = out[5:].strip()
+            for _str in [':', 'eax=', 'ebx=', 'ecx=', 'edx=']:
+                _tmp = _tmp.replace(_str, '')
+            return _tmp.split(' ')
+    except processutils.ProcessExecutionError as e:
+        LOG.warning("Something went wrong when waiting for cpuid."
+                    "Error: %s", e)
+    return ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0']
+
+
+def _get_msr_info(regno, bitfield="63:0"):
+    """
+    :param regno: register address
+    :param bitfield: Output bits [high:low] only
+    :return: hex format of 64 bits
+    """
+    try:
+        args = ['rdmsr', '-x', '-f', bitfield, str(regno)]
+        out, _ = utils.execute(*args)
+        return out
+    except processutils.ProcessExecutionError as e:
+        LOG.warning("Something went wrong when waiting for rdmsr."
+                    "Error: %s", e)
+    return '0x0'
+
+
 def _get_system_lshw_dict():
     """Get a dict representation of the system from lshw
 
@@ -538,6 +574,12 @@ class Memory(encoding.SerializableComparable):
         self.total = total
         self.physical_mb = physical_mb
 
+class SGX(encoding.SerializableComparable):
+    serializable_fields = ('cpuid_results', 'msr_enable_sgx')
+
+    def __init__(self, cpuid_results, msr_enable_sgx):
+        self.cpuid_results = cpuid_results
+        self.msr_enable_sgx = msr_enable_sgx
 
 class SystemVendorInfo(encoding.SerializableComparable):
     serializable_fields = ('product_name', 'serial_number', 'manufacturer')
@@ -579,7 +621,10 @@ class HardwareManager(object):
     def get_memory(self):
         raise errors.IncompatibleHardwareMethodError
 
-    def get_os_install_device(self):
+    def get_sgx(self):
+        raise errors.IncompatibleHardwareMethodError
+
+    def get_os_install_device(self, permit_refresh=False):
         raise errors.IncompatibleHardwareMethodError
 
     def get_bmc_address(self):
@@ -702,6 +747,7 @@ class HardwareManager(object):
         hardware_info['cpu'] = self.get_cpus()
         hardware_info['disks'] = self.list_block_devices()
         hardware_info['memory'] = self.get_memory()
+        hardware_info['sgx'] = self.get_sgx()
         hardware_info['bmc_address'] = self.get_bmc_address()
         hardware_info['bmc_v6address'] = self.get_bmc_v6address()
         hardware_info['system_vendor'] = self.get_system_vendor_info()
@@ -975,6 +1021,17 @@ class GenericHardwareManager(HardwareManager):
 
         return Memory(total=total, physical_mb=physical)
 
+    def get_sgx(self):
+        params = {'0x0': [None],
+                  '0x7': ['0x0'],
+                  '0x12': [hex(i) for i in range(0, 10)]}
+        results = []
+        for eax, ecxs in params.items():
+            for ecx in ecxs:
+                results.append(_get_cpu_info_by_cpuid(eax, ecx=ecx))
+        msr_enable_sgx = _get_msr_info('0x3a', '18:18')
+        return SGX(cpuid_results=results, msr_enable_sgx=msr_enable_sgx)
+
     def list_block_devices(self, include_partitions=False):
         block_devices = list_all_block_devices()
         if include_partitions:
diff --git a/ironic_python_agent/tests/unit/test_hardware.py b/ironic_python_agent/tests/unit/test_hardware.py
index da9a08e..2eae83d 100644
--- a/ironic_python_agent/tests/unit/test_hardware.py
+++ b/ironic_python_agent/tests/unit/test_hardware.py
@@ -991,6 +991,44 @@ MDADM_DETAIL_OUTPUT_BROKEN_RAID0 = ("""/dev/md126:
 """)
 
 
+CPUID_OUTPUT_1 = """CPU:
+   0x0000000 0x00: eax=0x0000001b ebx=0x756e6547 ecx=0x6c65746e edx=0x49656e69
+"""
+CPUID_OUTPUT_2 = """CPU:
+   0x0000007 0x00: eax=0x00000000 ebx=0xf3bfb7ef ecx=0x40417f5e edx=0xbc040412
+"""
+CPUID_OUTPUT_3 = """CPU:
+   0x0000012 0x00: eax=0x00000403 ebx=0x00000001 ecx=0x00000000 edx=0x0000381f
+"""
+CPUID_OUTPUT_4 = """CPU:
+   0x0000012 0x01: eax=0x000000b6 ebx=0x00000000 ecx=0x000002e7 edx=0x00000000
+"""
+CPUID_OUTPUT_5 = """CPU:
+   0x0000012 0x02: eax=0x00c00001 ebx=0x00000020 ecx=0x7ec00002 edx=0x00000000
+"""
+CPUID_OUTPUT_6 = """CPU:
+   0x0000012 0x03: eax=0x00c00001 ebx=0x00000040 ecx=0x7f400002 edx=0x00000000
+"""
+CPUID_OUTPUT_7 = """CPU:
+   0x0000012 0x04: eax=0x00000000 ebx=0x00000000 ecx=0x00000000 edx=0x00000000
+"""
+CPUID_OUTPUT_8 = """CPU:
+   0x0000012 0x05: eax=0x00000000 ebx=0x00000000 ecx=0x00000000 edx=0x00000000
+"""
+CPUID_OUTPUT_9 = """CPU:
+   0x0000012 0x06: eax=0x00000000 ebx=0x00000000 ecx=0x00000000 edx=0x00000000
+"""
+CPUID_OUTPUT_10 = """CPU:
+   0x0000012 0x07: eax=0x00000000 ebx=0x00000000 ecx=0x00000000 edx=0x00000000
+"""
+CPUID_OUTPUT_11 = """CPU:
+   0x0000012 0x08: eax=0x00000000 ebx=0x00000000 ecx=0x00000000 edx=0x00000000
+"""
+CPUID_OUTPUT_12 = """CPU:
+   0x0000012 0x09: eax=0x00000000 ebx=0x00000000 ecx=0x00000000 edx=0x00000000
+"""
+
+
 class FakeHardwareManager(hardware.GenericHardwareManager):
     def __init__(self, hardware_support):
         self._hardware_support = hardware_support
@@ -1753,6 +1791,122 @@ class TestGenericHardwareManager(base.IronicAgentTest):
         self.assertEqual(3952 * 1024 * 1024, mem.total)
         self.assertEqual(3952, mem.physical_mb)
 
+    @mock.patch.object(utils, 'execute', autospec=True)
+    def test_get_sgx(self, mocked_execute):
+        mocked_execute.side_effect = [
+            (CPUID_OUTPUT_1, ''),
+            (CPUID_OUTPUT_2, ''),
+            (CPUID_OUTPUT_3, ''),
+            (CPUID_OUTPUT_4, ''),
+            (CPUID_OUTPUT_5, ''),
+            (CPUID_OUTPUT_6, ''),
+            (CPUID_OUTPUT_7, ''),
+            (CPUID_OUTPUT_8, ''),
+            (CPUID_OUTPUT_9, ''),
+            (CPUID_OUTPUT_10, ''),
+            (CPUID_OUTPUT_11, ''),
+            (CPUID_OUTPUT_12, ''),
+            ('1', '')
+        ]
+        expected_cpuid_results = [
+            ['0x0000000', '0x00',
+             '0x0000001b', '0x756e6547', '0x6c65746e', '0x49656e69'],
+            ['0x0000007', '0x00',
+             '0x00000000', '0xf3bfb7ef', '0x40417f5e', '0xbc040412'],
+            ['0x0000012', '0x00',
+             '0x00000403', '0x00000001', '0x00000000', '0x0000381f'],
+            ['0x0000012', '0x01',
+             '0x000000b6', '0x00000000', '0x000002e7', '0x00000000'],
+            ['0x0000012', '0x02',
+             '0x00c00001', '0x00000020', '0x7ec00002', '0x00000000'],
+            ['0x0000012', '0x03',
+             '0x00c00001', '0x00000040', '0x7f400002', '0x00000000'],
+            ['0x0000012', '0x04',
+             '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+            ['0x0000012', '0x05',
+             '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+            ['0x0000012', '0x06',
+             '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+            ['0x0000012', '0x07',
+             '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+            ['0x0000012', '0x08',
+             '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+            ['0x0000012', '0x09',
+             '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+        ]
+        expected_msr_enable_sgx = '1'
+        expect_sgx = hardware.SGX(
+            cpuid_results=expected_cpuid_results, msr_enable_sgx=expected_msr_enable_sgx)
+        result = self.hardware.get_sgx()
+        mocked_execute.assert_has_calls([
+            mock.call('cpuid', '-l', '0x0', '-r', '-1'),
+            mock.call('cpuid', '-l', '0x7', '-r', '-1', '-s', '0x0'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x0'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x1'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x2'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x3'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x4'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x5'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x6'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x7'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x8'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x9'),
+            mock.call('rdmsr', '-x', '-f', '18:18', '0x3a')
+        ])
+        self.assertEqual(expect_sgx.serialize(), result.serialize())
+
+    @mock.patch.object(utils, 'execute', autospec=True)
+    def test_get_sgx_exception(self, mocked_execute):
+        mocked_execute.side_effect = [
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError(),
+            processutils.ProcessExecutionError()
+        ]
+        expected_cpuid_results = [
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0'],
+            ['0x0','0x0','0x0','0x0','0x0','0x0']
+        ]
+        expected_msr_enable_sgx = '0x0'
+        expect_sgx = hardware.SGX(
+            cpuid_results=expected_cpuid_results, msr_enable_sgx=expected_msr_enable_sgx)
+        result = self.hardware.get_sgx()
+        mocked_execute.assert_has_calls([
+            mock.call('cpuid', '-l', '0x0', '-r', '-1'),
+            mock.call('cpuid', '-l', '0x7', '-r', '-1', '-s', '0x0'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x0'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x1'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x2'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x3'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x4'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x5'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x6'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x7'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x8'),
+            mock.call('cpuid', '-l', '0x12', '-r', '-1', '-s', '0x9'),
+            mock.call('rdmsr', '-x', '-f', '18:18', '0x3a')
+        ])
+        self.assertEqual(expect_sgx.serialize(), result.serialize())
+
     @mock.patch('ironic_python_agent.netutils.get_hostname', autospec=True)
     def test_list_hardware_info(self, mocked_get_hostname):
         self.hardware.list_network_interfaces = mock.Mock()
@@ -1785,6 +1939,10 @@ class TestGenericHardwareManager(base.IronicAgentTest):
         self.hardware.get_bmc_v6address = mock.Mock()
         self.hardware.get_system_vendor_info = mock.Mock()
 
+        self.hardware.get_sgx = mock.Mock()
+        self.hardware.get_sgx.return_value = hardware.SGX(
+            cpuid_results={}, msr_enable_sgx='1')
+
         mocked_get_hostname.return_value = 'mock_hostname'
 
         hardware_info = self.hardware.list_hardware_info()
@@ -1797,6 +1955,7 @@ class TestGenericHardwareManager(base.IronicAgentTest):
         self.assertEqual(self.hardware.get_boot_info(),
                          hardware_info['boot'])
         self.assertEqual('mock_hostname', hardware_info['hostname'])
+        self.assertEqual(self.hardware.get_sgx(), hardware_info['sgx'])
 
     @mock.patch.object(hardware, 'list_all_block_devices', autospec=True)
     def test_list_block_devices(self, list_mock):
-- 
2.17.1

