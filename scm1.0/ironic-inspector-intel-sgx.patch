From 8c7a69c3e8a28edf02b27ac595380b15e48a99f1 Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Mon, 23 May 2022 13:35:51 +0800
Subject: [PATCH] Extract SGX properties from inspect data

---
 ironic_inspector/plugins/sgx.py               |  77 ++++++++++
 .../test/unit/test_plugins_sgx.py             | 139 ++++++++++++++++++
 setup.cfg                                     |   1 +
 3 files changed, 217 insertions(+)
 create mode 100644 ironic_inspector/plugins/sgx.py
 create mode 100644 ironic_inspector/test/unit/test_plugins_sgx.py

diff --git a/ironic_inspector/plugins/sgx.py b/ironic_inspector/plugins/sgx.py
new file mode 100644
index 0000000..e33a815
--- /dev/null
+++ b/ironic_inspector/plugins/sgx.py
@@ -0,0 +1,77 @@
+from ironic_inspector.plugins import base
+from ironic_inspector import utils
+
+LOG = utils.getProcessingLogger(__name__)
+
+
+class SGXProcessingHook(base.ProcessingHook):
+
+    @classmethod
+    def _get_smx_support(cls, cpuid_result, sgx_info):
+        _eax, _, _, _, ecx, _ = cpuid_result
+        if int(_eax, 16) != 0x0:
+            return False
+        sgx_info['support_smx'] = (int(ecx, 16) >> 6) & 0x01
+        return True
+
+    @classmethod
+    def _get_sgx_support(cls, cpuid_result, sgx_info):
+        _eax, _ecx, _, ebx, ecx, _ = cpuid_result
+        if int(_eax, 16) != 0x07:
+            return False
+        sgx_info['support_sgx'] = (int(ebx, 16) >> 2) & 0x01
+        sgx_info['support_sgx_lc'] = (int(ecx, 16) >> 30) & 0x01
+        return True
+
+    @classmethod
+    def _get_sgx_capabilities(cls, cpuid_result, sgx_info):
+        _eax, _ecx, eax, _, _, edx = cpuid_result
+        if int(_eax, 16) != 0x12 or int(_ecx, 16) != 0x0:
+            return False
+        sgx_info['sgx_1'] = int(eax, 16) & 0x01
+        sgx_info['sgx_2'] = (int(eax, 16) >> 1) & 0x01
+        sgx_info['max_enclave_size_not64'] = int(edx, 16) & 0xFF
+        sgx_info['max_enclave_size_64'] = (int(edx, 16) >> 8) & 0xFF
+        return True
+
+    @classmethod
+    def _get_sgx_epc_mb(cls, cpuid_result, sgx_info):
+        _eax, _ecx, eax, _, ecx, edx = cpuid_result
+        if int(_eax, 16) != 0x12 or int(_ecx, 16) not in range(2,10):
+            return False
+        epc_mb = (((int(edx, 16) & 0xFFFFF) << 12) + (int(ecx, 16) >> 20)) \
+            if (int(eax, 16) & 0xF) == 1 else 0
+        if sgx_info.get('sgx_epc_mb'):
+            sgx_info['sgx_epc_mb'] = sgx_info['sgx_epc_mb'] + epc_mb
+        else:
+            sgx_info['sgx_epc_mb'] = epc_mb
+        return True
+
+    def before_update(self, introspection_data, node_info, **kwargs):
+        """Process cpuid info about sgx"""
+        inventory = utils.get_inventory(introspection_data)
+
+        sgx = inventory.get("sgx")
+        if sgx is None:
+            LOG.warning("There is no SGX cpuid data.", node_info=node_info)
+            return
+
+        sgx_info = {}
+        for cpuid_result in sgx['cpuid_results']:
+            if cpuid_result == ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0']:
+                continue
+            if self._get_smx_support(cpuid_result, sgx_info):
+                continue
+            if self._get_sgx_support(cpuid_result, sgx_info):
+                continue
+            if self._get_sgx_capabilities(cpuid_result, sgx_info):
+                continue
+            if self._get_sgx_epc_mb(cpuid_result, sgx_info):
+                continue
+        # Valid return value of _get_msr_info does not start with 0x,
+        # but it is a hex.
+        msr_enable_sgx = sgx['msr_enable_sgx']
+        if msr_enable_sgx != "0x0":
+            sgx_info['msr_enable_sgx'] = int(msr_enable_sgx, 16)
+        node_info.update_properties(**sgx_info)
+        LOG.info('Obtain SGX info from CPUID results: %s', sgx_info)
diff --git a/ironic_inspector/test/unit/test_plugins_sgx.py b/ironic_inspector/test/unit/test_plugins_sgx.py
new file mode 100644
index 0000000..1e3ebf3
--- /dev/null
+++ b/ironic_inspector/test/unit/test_plugins_sgx.py
@@ -0,0 +1,139 @@
+import copy
+
+import mock
+
+from ironic_inspector import node_cache
+from ironic_inspector.plugins import sgx
+from ironic_inspector.test import base as test_base
+
+class TestSGXProcessingHook(test_base.NodeTest):
+    hook = sgx.SGXProcessingHook()
+
+    def setUp(self):
+        super(TestSGXProcessingHook, self).setUp()
+        self.data_1 = copy.deepcopy(self.data)
+        self.data_1['inventory'].update({
+            'sgx': {
+                'cpuid_results': [
+                    ['0x00000000', '0x00',
+                     '0x0000001b', '0x756e6547', '0x6c65746e', '0x49656e69'],
+                    ['0x00000007', '0x00',
+                     '0x00000000', '0xf3bfb7ef', '0x40417f5e', '0xbc040412'],
+                    ['0x00000012', '0x00',
+                     '0x00000403', '0x00000001', '0x00000000', '0x0000381f'],
+                    ['0x00000012', '0x01',
+                     '0x000000b6', '0x00000000', '0x000002e7', '0x00000000'],
+                    ['0x00000012', '0x02',
+                     '0x00c00001', '0x00000020', '0x7ec00002', '0x00000000'],
+                    ['0x00000012', '0x03',
+                     '0x00c00001', '0x00000040', '0x7f400002', '0x00000000'],
+                    ['0x00000012', '0x04',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x05',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x06',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x07',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x08',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x09',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000']],
+                'msr_enable_sgx': '1'
+            }
+        })
+        self.data_2 = copy.deepcopy(self.data)
+        self.data_2['inventory'].update({
+            'sgx': {
+                'cpuid_results': [
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0'],
+                    ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0']],
+                'msr_enable_sgx': '0x0'
+            }
+        })
+        self.data_3 = copy.deepcopy(self.data)
+        self.data_3['inventory'].update({
+            'sgx': {
+                'cpuid_results': [
+                    ['0x00000000', '0x00',
+                     '0x0000000d', '0x756e6547', '0x6c65746e', '0x49656e69'],
+                    ['0x00000007', '0x00',
+                     '0x00000000', '0x001c07a9', '0x00000000', '0x04000000'],
+                    ['0x00000012', '0x00',
+                     '0x00000000', '0x00000340', '0x00000340', '0x00000000'],
+                    ['0x00000012', '0x01',
+                     '0x00000001', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x02',
+                     '0x00000100', '0x00000240', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x03',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x04',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x05',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x06',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x07',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x08',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000'],
+                    ['0x00000012', '0x09',
+                     '0x00000000', '0x00000000', '0x00000000', '0x00000000']],
+                'msr_enable_sgx': '0'
+            }
+        })
+
+    @mock.patch.object(node_cache.NodeInfo, 'update_properties',
+                       autospec=True)
+    def test_before_update_data_1(self, mock_update_props):
+        expected_sgx_properties = {
+            'support_smx': 1,
+            'support_sgx': 1,
+            'support_sgx_lc': 1,
+            'sgx_1': 1,
+            'sgx_2': 1,
+            'max_enclave_size_not64': 31,
+            'max_enclave_size_64': 56,
+            'sgx_epc_mb': 4064,
+            'msr_enable_sgx': 1
+        }
+        self.hook.before_update(self.data_1, self.node_info)
+        mock_update_props.assert_called_once_with(self.node_info,
+                                                  **expected_sgx_properties)
+
+    @mock.patch.object(node_cache.NodeInfo, 'update_properties',
+                       autospec=True)
+    def test_before_update_data_2(self, mock_update_props):
+        expected_sgx_properties = {}
+        self.hook.before_update(self.data_2, self.node_info)
+        mock_update_props.assert_called_once_with(self.node_info,
+                                                  **expected_sgx_properties)
+
+
+    @mock.patch.object(node_cache.NodeInfo, 'update_properties',
+                       autospec=True)
+    def test_before_update_data_3(self, mock_update_props):
+        expected_sgx_properties = {
+            'support_smx': 1,
+            'support_sgx': 0,
+            'support_sgx_lc': 0,
+            'sgx_1': 0,
+            'sgx_2': 0,
+            'max_enclave_size_not64': 0,
+            'max_enclave_size_64': 0,
+            'sgx_epc_mb': 0,
+            'msr_enable_sgx': 0
+        }
+        self.hook.before_update(self.data_3, self.node_info)
+        mock_update_props.assert_called_once_with(self.node_info,
+                                                  **expected_sgx_properties)
diff --git a/setup.cfg b/setup.cfg
index 98d13e0..cff55bb 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -45,6 +45,7 @@ ironic_inspector.hooks.processing =
     local_link_connection = ironic_inspector.plugins.local_link_connection:GenericLocalLinkConnectionHook
     lldp_basic = ironic_inspector.plugins.lldp_basic:LLDPBasicProcessingHook
     pci_devices = ironic_inspector.plugins.pci_devices:PciDevicesHook
+    sgx = ironic_inspector.plugins.sgx:SGXProcessingHook
 ironic_inspector.hooks.node_not_found =
     example = ironic_inspector.plugins.example:example_not_found_hook
     enroll = ironic_inspector.plugins.discovery:enroll_node_not_found_hook
-- 
2.17.1

